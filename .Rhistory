install.packages("raster")
install.packages("tidyverse")
install.packages("car")
install.packages("car")
install.packages("data.table")
setwd("C:/Users/yyj94/Desktop/회귀분석프로젝트")
model <- read.csv("db2.csv", header = TRUE)
setwd("C:/Users/yyj94/Desktop/회귀분석프로젝트")
model <- read.csv("db2.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
out <- glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha=0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(car)
library(corrplot)
library(ISLR)
library(glmnet)
library(timeDate)
library(lm.beta)
library(Metrics)
out <- glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha=0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(car)
library(corrplot)
library(ISLR)
library(glmnet)
library(timeDate)
library(lm.beta)
library(Metrics)
setwd("C:/Users/yyj94/Desktop/회귀분석프로젝트")
# setwd("C:/Users/tkdgu/Google 드라이브/2019/2019패스트캠퍼스/회귀분석프로젝트")
db<- read.csv(file             = "db1.csv",
header           = TRUE,
stringsAsFactors = FALSE)
db <- na.omit(db)
db$지역 <- as.factor(db$지역)
# 날짜 변수 -> 계절성 변수 + 휴일 변수
# 1. 계절성 변수 추가----
# 기상청 계절 구분
# 봄 : 3월 1일 ~ 5월 31일
# 여름 : 6월 1일 ~ 8월 31일
# 가을 : 9월 1일 ~ 11월 30일
# 겨울 : 12월 1일 ~ 2월 28(29)일
db$계절 <- unlist(strsplit(as.character(db$날짜[1]),"-"))[2]
for (i in 1: nrow(db)){
db$계절[i] <- unlist(strsplit(as.character(db$날짜[i]),"-"))[2]
}
db$계절 <- str_replace_all(db$계절 ,"02", "겨울")
db$계절 <- str_replace_all(db$계절 ,"0+[3-5]", "봄")
db$계절 <- str_replace_all(db$계절 ,"0+[6-8]", "여름")
db$계절 <- str_replace_all(db$계절 ,"09", "가을")
db$계절 <- str_replace_all(db$계절 ,"1+[0-1]", "가을")
#colnames(db2) <- c("계절" , colnames(db2)[2:15])
table(db$계절)
# 2. 주말 휴일 변수 추가----
db$날짜 <- as.Date(db$날짜)
holidays <- as.Date(c("2018-02-15", "2018-02-16", "2018-02-17", "2018-03-01", "2018-05-05",
"2018-05-22","2018-06-06", "2018-08-15","2018-09-23", "2018-09-24",
"2018-09-25", "2018-10-03", "2018-10-09", "2018-12-25")) # 주말
db$WeekDay[isWeekday(db$날짜)] <- 0
db$WeekDay[isWeekend(db$날짜)] <- 1
db$WeekDay[(db$날짜) %in% holidays] <- 1
table(db$WeekDay)
# 3. 강수량 -> 강수량 수준 변수로 치환----
boxplot(db$강수량) # 대부분의 데이터가 0 , 강수량은 절대량보다 수준이 중요
db %>%
ggplot2::ggplot(mapping = aes(x = 강수량)) +
geom_histogram() # 히스토그램 결과 대부분이 0인 것을 확인
# 기상청 기준 강수량 표현
# - 비 매우 조금 : 강수량 1mm 미만
# - 비 조금 : 강수량 5mm 미만
# - 비 다소 : 강수량 5～20mm 미만
# - 비 다소 많음 : 강수량 20～80mm 미만
# - 비 많음 : 강수량 80mm 이상(주의보 기준)
# - 비 매우 많음 : 강수량 150mm 이상(경보 기준)
db %>%
filter(강수량 >= 1) %>%
ggplot2::ggplot(mapping = aes(x = 강수량)) +
geom_histogram() # 0이 아닌 강수량 그래프프
#집단 1. 강수량(0   <= x  < 1mm) 맑음 + 비 매우조금
#집단 2. 강수량(1   <= x  < 20mm) 비 조금 + 다소
#집단 3. 강수량(20  <= x ) 비 다소 많음 + 많음 + 매우 많음
db %>%
filter(강수량 < 1) %>%
nrow()
db %>%
filter(강수량 >= 1 & 강수량 < 20) %>%
nrow()
db %>%
filter(강수량 >= 20) %>%
nrow()
db <- db %>%
mutate(강수량수준 = ifelse(강수량 < 1 , "1mm미만",
ifelse(강수량 < 20 , "20mm미만", "20mm초과" )))
table(db$강수량수준)
db <- db[,-c(1:2)]
#### ----------- 데이터셋 분할 training:test=8:2
set.seed(seed = 1902)  # 프로젝트 년월
index <- sample(x = 1:2,
size = nrow(x = db),
replace = TRUE,
prob = c(0.8, 0.2))
trainSet <- db[index == 1, ]
testSet  <- db[index == 2, ]
str(db)
db_train <- trainSet
db_test  <- testSet
#1) model_1 전처리 이전 기본 회귀모형
temp_db <- db_train
model_1 <- lm(대여건수 ~., data = temp_db)
summary(model_1)
car::vif(model_1)
#2) model_2 전처리 이후 형기본 회귀모형
model_2 <- lm(대여건수 ~., data = db_train)
forward_model <- step(model_2, direction = "forward")
backward_model <- step(model_2, direction = "backward")
both_model <- step(model_2, direction = "both")
summary(backward_model)
car::vif(backward_model)
#######   지역 변수 - 교통량에서 다중공선성 문제 발생
#3) model_3 backward -> 다중공선성 해결 회귀모형
model_3<- lm(formula = 대여건수 ~ 지역 + 평균기온 + 평균습도 +
평균풍속 + 강수량 + 일산화탄소농도 + 아황산가스농도 + 미세먼지량 +
초미세먼지량 + 계절 + WeekDay + 강수량수준 , data = db_train)
summary(model_3)
car::vif(model_3)
car::durbinWatsonTest(model_3)
sort(lm.beta::lm.beta(model_3)$standardized, decreasing = TRUE)
gvlma::gvlma(model_3)
####### Error에 대한 전체적인 가정은 만족하지 않았다
knitr::opts_chunk$set(echo = TRUE)
predictions <- predict(model_3, db_test)
original <- rmse(db_test$대여건수, predictions)
original <- round(original, digits = 1)
original
ridge_lasso_train_x <- model.matrix(대여건수 ~ 지역 + 평균기온 + 평균습도 +
평균풍속 + 강수량 + 일산화탄소농도 + 아황산가스농도 + 미세먼지량 +
초미세먼지량 + 계절 + WeekDay + 강수량수준, data = db_train)[,-1]
ridge_lasso_train_y <- db_train$대여건수
ridge_lasso_test_x <- model.matrix(대여건수 ~ 지역 + 평균기온 + 평균습도 +
평균풍속 + 강수량 + 일산화탄소농도 + 아황산가스농도 + 미세먼지량 +
초미세먼지량 + 계절 + WeekDay + 강수량수준, data = db_test)[,-1]
ridge_lasso_test_y <- db_test$대여건수
# lambda 생성, 10^-2에서 10^10까지의 수를 100등분하여 만든 벡터
grid <- 10^seq(10, -2, length = 100)
ridge.mod <- glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha = 0, lambda = grid, thresh = 1e-12)
set.seed(1)
# cross validation을 이용하여 람다 선택
cv.out_ridge <- cv.glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha = 0)
plot(cv.out_ridge)
# MSE가 최소가 되는 람다
bestlam_ridge <- cv.out_ridge$lambda.min
ridge.pred <- predict(ridge.mod, s = bestlam_ridge, newx = ridge_lasso_test_x)
ridge <- rmse(ridge_lasso_test_y, ridge.pred)
ridge <- round(ridge, digits = 1)
ridge
df <- data.frame(c("org", "ridge", "lasso"), c(original, ridge, lasso))
lasso.mod <- glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha = 1, lambda = grid)
set.seed(1)
cv.out_lasso <- cv.glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha = 1)
plot(cv.out_lasso)
bestlam_lasso <- cv.out_lasso$lambda.min
lasso.pred <- predict(lasso.mod, s = bestlam_lasso, newx = ridge_lasso_test_x)
lasso <- rmse(ridge_lasso_test_y, lasso.pred)
lasso <- round(lasso, digits = 1)
lasso
df <- data.frame(c("org", "ridge", "lasso"), c(original, ridge, lasso))
colnames(df) <- c("model", "rmse")
df %>%
ggplot2::ggplot(mapping = aes(x = model, y = rmse)) +
geom_point(aes(colour = factor(model)), size = 5) +
geom_text(aes(label = rmse), vjust = -1)  +
ylim(468, 470)
plot(cv.out_ridge$glmnet.fit, xvar="norm", label=TRUE)
plot(cv.out_ridge$glmnet.fit, xvar="lambda", label=TRUE)
out <- glmnet(ridge_lasso_train_x, ridge_lasso_train_y, alpha=0)
predict(out, type = "coefficients", s = bestlam_ridge)[1:37,]
lm.beta::lm.beta(out)
